   Compiling frontend v0.1.0 (/home/lesurp/Projects/PewCraft/frontend)
warning: unused imports: `GameMap`, `Id`
 --> frontend/src/api.rs:1:36
  |
1 | use common::game::{GameDefinition, GameMap, GameState, Id};
  |                                    ^^^^^^^             ^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `debug`, `info`
 --> frontend/src/tui_impl/render.rs:6:11
  |
6 | use log::{debug, info};
  |           ^^^^^  ^^^^

warning: unused import: `Widget`
  --> frontend/src/tui_impl/render.rs:12:36
   |
12 | use tui::widgets::{Block, Borders, Widget};
   |                                    ^^^^^^

warning: unused import: `Write`
  --> frontend/src/tui_impl/tui.rs:12:42
   |
12 | use std::io::{Stdin, Stdout, StdoutLock, Write};
   |                                          ^^^^^

warning: unused variable: `game_id`
  --> frontend/src/api.rs:41:44
   |
41 |     pub fn join_game<S: AsRef<str>>(&self, game_id: S) -> Option<WireCreatedGame> {
   |                                            ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_game_id`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `game_id`
  --> frontend/src/api.rs:57:9
   |
57 |         game_id: S,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_game_id`

warning: unused variable: `char_id`
  --> frontend/src/api.rs:58:9
   |
58 |         char_id: S,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_char_id`

warning: unused variable: `joined_game`
   --> frontend/src/state.rs:283:33
    |
283 | ...                   let joined_game = global.endpoint.join_game_with_char(game_id, char_id);
    |                           ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_joined_game`

warning: unused variable: `i`
   --> frontend/src/state.rs:488:19
    |
488 |     fn next(self, i: Event) -> Self::RootState {
    |                   ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `cell`
   --> frontend/src/tui_impl/map.rs:172:13
    |
172 |         let cell = self.0;
    |             ^^^^ help: if this is intentional, prefix it with an underscore: `_cell`

warning: unused variable: `character`
   --> frontend/src/tui_impl/map.rs:173:13
    |
173 |         let character = self.1;
    |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_character`

warning: associated function `game_state` is never used
  --> frontend/src/api.rs:88:12
   |
88 |     pub fn game_state<S: AsRef<str>>(&self, game_id: S) -> Option<GameState> {
   |            ^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: variant `Cancel` is never constructed
  --> frontend/src/state.rs:16:5
   |
7  | pub enum Event {
   |          ----- variant in this enum
...
16 |     Cancel,
   |     ^^^^^^
   |
   = note: `Event` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: variant `SelectionVertical` is never constructed
  --> frontend/src/state.rs:24:5
   |
22 | pub enum ExpectedEvent {
   |          ------------- variant in this enum
23 |     Char,
24 |     SelectionVertical,
   |     ^^^^^^^^^^^^^^^^^
   |
   = note: `ExpectedEvent` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: variant `PlayGame` is never constructed
  --> frontend/src/state.rs:66:5
   |
61 | pub enum GlobalState<'a> {
   |          ----------- variant in this enum
...
66 |     PlayGame(PlayGameState<'a>),
   |     ^^^^^^^^
   |
   = note: `GlobalState` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: variants `OurTurn` and `NotOurTurn` are never constructed
   --> frontend/src/state.rs:475:5
    |
474 | pub enum PlayGameState<'a> {
    |          ------------- variants in this enum
475 |     OurTurn(PlayGameStateData<'a>),
    |     ^^^^^^^
476 |     NotOurTurn(PlayGameStateData<'a>),
    |     ^^^^^^^^^^
    |
    = note: `PlayGameState` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: variant `PasteClipboard` is never constructed
  --> frontend/src/tui_impl/input.rs:13:5
   |
10 | pub enum TuiEvent {
   |          -------- variant in this enum
...
13 |     PasteClipboard,
   |     ^^^^^^^^^^^^^^

warning: unused `Result` that must be used
  --> frontend/src/tui_impl/tui.rs:28:9
   |
28 |         stdout.execute(EnterAlternateScreen);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this `Result` may be an `Err` variant, which should be handled
   = note: `#[warn(unused_must_use)]` on by default

warning: `frontend` (bin "frontend") generated 18 warnings (run `cargo fix --bin "frontend"` to apply 10 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 4.11s
     Running `/home/lesurp/Projects/PewCraft/target/debug/frontend`
[2022-12-24T14:15:39Z INFO  frontend::api] API endpoint: http://localhost:8000
[2022-12-24T14:15:39Z INFO  frontend] Created API endpoint
[2022-12-24T14:15:39Z DEBUG reqwest::connect] starting new connection: http://localhost:8000/
[2022-12-24T14:15:39Z INFO  frontend] Loaded game from server
[2022-12-24T14:15:39Z INFO  frontend::tui_impl::tui] Enabling raw mode
[2022-12-24T14:15:39Z INFO  frontend::tui_impl::tui] Raw mode enabled
[2022-12-24T14:15:39Z INFO  frontend] Created game state
[2022-12-24T14:15:39Z DEBUG frontend] Current state: CreateOrJoin(Create(StateData(GlobalStateData { game: GameDefinition { classes: IdMap({Id(1, PhantomData<common::game::class::Class>): Class { name: "Warrior", description: "A fiercy and brave fighter, thanks to his wits, or lack thereof", health: 15000, mana: 0, swiftness: 10000, strength: 10000, dexterity: 7000, armor: 15000, intelligence: 2000, concentration: 1000, willpower: 5000 }, Id(0, PhantomData<common::game::class::Class>): Class { name: "Mage", description: "`Why do guys with magical powers are always into crossdressing as well` -- Someone, before receiving a fireball in the face", health: 10000, mana: 10000, swiftness: 7000, strength: 3000, dexterity: 2000, armor: 9000, intelligence: 12000, concentration: 9000, willpower: 10000 }}), skills: IdMap({Id(0, PhantomData<common::game::skill::Skill>): Skill { name: "Fireball", cost: 1000, range: Range { min: 1, max: 10, kind: Star, target: Anyone, needs_los: true }, precision: None, effects: {Id(1001, PhantomData<common::game::effect::Effect>), Id(1000, PhantomData<common::game::effect::Effect>)} }, Id(1, PhantomData<common::game::skill::Skill>): Skill { name: "Sword swing", cost: 0, range: Range { min: 1, max: 1, kind: Star, target: Anything, needs_los: true }, precision: None, effects: {Id(1000, PhantomData<common::game::effect::Effect>)} }, Id(2, PhantomData<common::game::skill::Skill>): Skill { name: "Block", cost: 0, range: Range { min: 0, max: 0, kind: Square, target: Ally, needs_los: true }, precision: None, effects: {Id(0, PhantomData<common::game::effect::Effect>)} }}), effects: IdMap({Id(0, PhantomData<common::game::effect::Effect>): Effect { id: Id(1000, PhantomData<common::game::effect::Effect>), kind: DirectDamage(DirectDamage { range: None, damage: Damage { flat_magical: 0, flat_physical: 0, flat_pure: 0, perc_magical: 0.0, perc_physical: 0.0, perc_pure: 0.0, perc_modif_magical: 1.0, perc_modif_physical: 0.0 } }) }, Id(1, PhantomData<common::game::effect::Effect>): Effect { id: Id(1001, PhantomData<common::game::effect::Effect>), kind: Buff(Buff { name: "Burn", range: None, success_rate: Some(0.4), duration: 3, kind: DoT(Damage { flat_magical: 0, flat_physical: 0, flat_pure: 0, perc_magical: 0.0, perc_physical: 0.0, perc_pure: 0.0, perc_modif_magical: 0.0, perc_modif_physical: 0.0 }) }) }, Id(2, PhantomData<common::game::effect::Effect>): Effect { id: Id(1000, PhantomData<common::game::effect::Effect>), kind: DirectDamage(DirectDamage { range: None, damage: Damage { flat_magical: 0, flat_physical: 0, flat_pure: 0, perc_magical: 0.0, perc_physical: 0.0, perc_pure: 0.0, perc_modif_magical: 0.0, perc_modif_physical: 0.0 } }) }, Id(3, PhantomData<common::game::effect::Effect>): Effect { id: Id(0, PhantomData<common::game::effect::Effect>), kind: Buff(Buff { name: "Block", range: None, success_rate: None, duration: 1, kind: Attribute(Armor, Perc(0.5)) }) }}), maps: IdMap({Id(0, PhantomData<common::game::map::GameMap>): GameMap { name: "Plain with pillars", data: [Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: Wall }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: Wall }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }], width: 5, height: 5, teams: [Team("Evil guys", [Id(0, PhantomData<common::game::map::Cell>), Id(1, PhantomData<common::game::map::Cell>), Id(2, PhantomData<common::game::map::Cell>), Id(3, PhantomData<common::game::map::Cell>), Id(4, PhantomData<common::game::map::Cell>), Id(5, PhantomData<common::game::map::Cell>)]), Team("Very evil guys", [Id(19, PhantomData<common::game::map::Cell>), Id(20, PhantomData<common::game::map::Cell>), Id(21, PhantomData<common::game::map::Cell>), Id(22, PhantomData<common::game::map::Cell>), Id(23, PhantomData<common::game::map::Cell>), Id(24, PhantomData<common::game::map::Cell>)])] }, Id(1, PhantomData<common::game::map::GameMap>): GameMap { name: "Plain with bridge", data: [Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: Water }, Cell { height: 0, attribute: Water }, Cell { height: 0, attribute: Water }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: Water }, Cell { height: 0, attribute: Water }, Cell { height: 0, attribute: Water }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: Water }, Cell { height: 0, attribute: Water }, Cell { height: 0, attribute: Water }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }], width: 4, height: 6, teams: [Team("Evil guys", [Id(0, PhantomData<common::game::map::Cell>), Id(1, PhantomData<common::game::map::Cell>), Id(2, PhantomData<common::game::map::Cell>), Id(3, PhantomData<common::game::map::Cell>), Id(4, PhantomData<common::game::map::Cell>), Id(5, PhantomData<common::game::map::Cell>)]), Team("Very evil guys", [Id(19, PhantomData<common::game::map::Cell>), Id(20, PhantomData<common::game::map::Cell>), Id(21, PhantomData<common::game::map::Cell>), Id(22, PhantomData<common::game::map::Cell>), Id(23, PhantomData<common::game::map::Cell>), Id(24, PhantomData<common::game::map::Cell>)])] }}), class_to_skills: {Id(0, PhantomData<common::game::class::Class>): [Id(0, PhantomData<common::game::skill::Skill>), Id(2, PhantomData<common::game::skill::Skill>)], Id(1, PhantomData<common::game::class::Class>): [Id(1, PhantomData<common::game::skill::Skill>), Id(2, PhantomData<common::game::skill::Skill>)]}, skill_to_classes: {Id(2, PhantomData<common::game::skill::Skill>): [Id(1, PhantomData<common::game::class::Class>), Id(0, PhantomData<common::game::class::Class>)], Id(0, PhantomData<common::game::skill::Skill>): [Id(0, PhantomData<common::game::class::Class>)], Id(1, PhantomData<common::game::skill::Skill>): [Id(1, PhantomData<common::game::class::Class>)]} }, endpoint: Endpoint { url: Url { scheme: "http", cannot_be_a_base: false, username: "", password: None, host: Some(Domain("localhost")), port: Some(8000), path: "/", query: None, fragment: None }, client: <hidden> } }, CreateOrJoinDataImpl { login: "" })))
[2022-12-24T14:15:39Z DEBUG frontend::tui_impl::tui] tui.rs:render
[2022-12-24T14:15:39Z DEBUG frontend::tui_impl::tui] Current state: CreateOrJoin(Create(StateData(GlobalStateData { game: GameDefinition { classes: IdMap({Id(1, PhantomData<common::game::class::Class>): Class { name: "Warrior", description: "A fiercy and brave fighter, thanks to his wits, or lack thereof", health: 15000, mana: 0, swiftness: 10000, strength: 10000, dexterity: 7000, armor: 15000, intelligence: 2000, concentration: 1000, willpower: 5000 }, Id(0, PhantomData<common::game::class::Class>): Class { name: "Mage", description: "`Why do guys with magical powers are always into crossdressing as well` -- Someone, before receiving a fireball in the face", health: 10000, mana: 10000, swiftness: 7000, strength: 3000, dexterity: 2000, armor: 9000, intelligence: 12000, concentration: 9000, willpower: 10000 }}), skills: IdMap({Id(0, PhantomData<common::game::skill::Skill>): Skill { name: "Fireball", cost: 1000, range: Range { min: 1, max: 10, kind: Star, target: Anyone, needs_los: true }, precision: None, effects: {Id(1001, PhantomData<common::game::effect::Effect>), Id(1000, PhantomData<common::game::effect::Effect>)} }, Id(1, PhantomData<common::game::skill::Skill>): Skill { name: "Sword swing", cost: 0, range: Range { min: 1, max: 1, kind: Star, target: Anything, needs_los: true }, precision: None, effects: {Id(1000, PhantomData<common::game::effect::Effect>)} }, Id(2, PhantomData<common::game::skill::Skill>): Skill { name: "Block", cost: 0, range: Range { min: 0, max: 0, kind: Square, target: Ally, needs_los: true }, precision: None, effects: {Id(0, PhantomData<common::game::effect::Effect>)} }}), effects: IdMap({Id(0, PhantomData<common::game::effect::Effect>): Effect { id: Id(1000, PhantomData<common::game::effect::Effect>), kind: DirectDamage(DirectDamage { range: None, damage: Damage { flat_magical: 0, flat_physical: 0, flat_pure: 0, perc_magical: 0.0, perc_physical: 0.0, perc_pure: 0.0, perc_modif_magical: 1.0, perc_modif_physical: 0.0 } }) }, Id(1, PhantomData<common::game::effect::Effect>): Effect { id: Id(1001, PhantomData<common::game::effect::Effect>), kind: Buff(Buff { name: "Burn", range: None, success_rate: Some(0.4), duration: 3, kind: DoT(Damage { flat_magical: 0, flat_physical: 0, flat_pure: 0, perc_magical: 0.0, perc_physical: 0.0, perc_pure: 0.0, perc_modif_magical: 0.0, perc_modif_physical: 0.0 }) }) }, Id(2, PhantomData<common::game::effect::Effect>): Effect { id: Id(1000, PhantomData<common::game::effect::Effect>), kind: DirectDamage(DirectDamage { range: None, damage: Damage { flat_magical: 0, flat_physical: 0, flat_pure: 0, perc_magical: 0.0, perc_physical: 0.0, perc_pure: 0.0, perc_modif_magical: 0.0, perc_modif_physical: 0.0 } }) }, Id(3, PhantomData<common::game::effect::Effect>): Effect { id: Id(0, PhantomData<common::game::effect::Effect>), kind: Buff(Buff { name: "Block", range: None, success_rate: None, duration: 1, kind: Attribute(Armor, Perc(0.5)) }) }}), maps: IdMap({Id(0, PhantomData<common::game::map::GameMap>): GameMap { name: "Plain with pillars", data: [Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: Wall }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: Wall }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }], width: 5, height: 5, teams: [Team("Evil guys", [Id(0, PhantomData<common::game::map::Cell>), Id(1, PhantomData<common::game::map::Cell>), Id(2, PhantomData<common::game::map::Cell>), Id(3, PhantomData<common::game::map::Cell>), Id(4, PhantomData<common::game::map::Cell>), Id(5, PhantomData<common::game::map::Cell>)]), Team("Very evil guys", [Id(19, PhantomData<common::game::map::Cell>), Id(20, PhantomData<common::game::map::Cell>), Id(21, PhantomData<common::game::map::Cell>), Id(22, PhantomData<common::game::map::Cell>), Id(23, PhantomData<common::game::map::Cell>), Id(24, PhantomData<common::game::map::Cell>)])] }, Id(1, PhantomData<common::game::map::GameMap>): GameMap { name: "Plain with bridge", data: [Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: Water }, Cell { height: 0, attribute: Water }, Cell { height: 0, attribute: Water }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: Water }, Cell { height: 0, attribute: Water }, Cell { height: 0, attribute: Water }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: Water }, Cell { height: 0, attribute: Water }, Cell { height: 0, attribute: Water }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }], width: 4, height: 6, teams: [Team("Evil guys", [Id(0, PhantomData<common::game::map::Cell>), Id(1, PhantomData<common::game::map::Cell>), Id(2, PhantomData<common::game::map::Cell>), Id(3, PhantomData<common::game::map::Cell>), Id(4, PhantomData<common::game::map::Cell>), Id(5, PhantomData<common::game::map::Cell>)]), Team("Very evil guys", [Id(19, PhantomData<common::game::map::Cell>), Id(20, PhantomData<common::game::map::Cell>), Id(21, PhantomData<common::game::map::Cell>), Id(22, PhantomData<common::game::map::Cell>), Id(23, PhantomData<common::game::map::Cell>), Id(24, PhantomData<common::game::map::Cell>)])] }}), class_to_skills: {Id(0, PhantomData<common::game::class::Class>): [Id(0, PhantomData<common::game::skill::Skill>), Id(2, PhantomData<common::game::skill::Skill>)], Id(1, PhantomData<common::game::class::Class>): [Id(1, PhantomData<common::game::skill::Skill>), Id(2, PhantomData<common::game::skill::Skill>)]}, skill_to_classes: {Id(2, PhantomData<common::game::skill::Skill>): [Id(1, PhantomData<common::game::class::Class>), Id(0, PhantomData<common::game::class::Class>)], Id(0, PhantomData<common::game::skill::Skill>): [Id(0, PhantomData<common::game::class::Class>)], Id(1, PhantomData<common::game::skill::Skill>): [Id(1, PhantomData<common::game::class::Class>)]} }, endpoint: Endpoint { url: Url { scheme: "http", cannot_be_a_base: false, username: "", password: None, host: Some(Domain("localhost")), port: Some(8000), path: "/", query: None, fragment: None }, client: <hidden> } }, CreateOrJoinDataImpl { login: "" })))
[2022-12-24T14:15:43Z DEBUG frontend] Received input: PrintableString("C")
thread 'main' panicked at 'Input: PrintableString("C")
State: CreateOrJoin(Create(StateData(GlobalStateData { game: GameDefinition { classes: IdMap({Id(1, PhantomData<common::game::class::Class>): Class { name: "Warrior", description: "A fiercy and brave fighter, thanks to his wits, or lack thereof", health: 15000, mana: 0, swiftness: 10000, strength: 10000, dexterity: 7000, armor: 15000, intelligence: 2000, concentration: 1000, willpower: 5000 }, Id(0, PhantomData<common::game::class::Class>): Class { name: "Mage", description: "`Why do guys with magical powers are always into crossdressing as well` -- Someone, before receiving a fireball in the face", health: 10000, mana: 10000, swiftness: 7000, strength: 3000, dexterity: 2000, armor: 9000, intelligence: 12000, concentration: 9000, willpower: 10000 }}), skills: IdMap({Id(0, PhantomData<common::game::skill::Skill>): Skill { name: "Fireball", cost: 1000, range: Range { min: 1, max: 10, kind: Star, target: Anyone, needs_los: true }, precision: None, effects: {Id(1001, PhantomData<common::game::effect::Effect>), Id(1000, PhantomData<common::game::effect::Effect>)} }, Id(1, PhantomData<common::game::skill::Skill>): Skill { name: "Sword swing", cost: 0, range: Range { min: 1, max: 1, kind: Star, target: Anything, needs_los: true }, precision: None, effects: {Id(1000, PhantomData<common::game::effect::Effect>)} }, Id(2, PhantomData<common::game::skill::Skill>): Skill { name: "Block", cost: 0, range: Range { min: 0, max: 0, kind: Square, target: Ally, needs_los: true }, precision: None, effects: {Id(0, PhantomData<common::game::effect::Effect>)} }}), effects: IdMap({Id(0, PhantomData<common::game::effect::Effect>): Effect { id: Id(1000, PhantomData<common::game::effect::Effect>), kind: DirectDamage(DirectDamage { range: None, damage: Damage { flat_magical: 0, flat_physical: 0, flat_pure: 0, perc_magical: 0.0, perc_physical: 0.0, perc_pure: 0.0, perc_modif_magical: 1.0, perc_modif_physical: 0.0 } }) }, Id(1, PhantomData<common::game::effect::Effect>): Effect { id: Id(1001, PhantomData<common::game::effect::Effect>), kind: Buff(Buff { name: "Burn", range: None, success_rate: Some(0.4), duration: 3, kind: DoT(Damage { flat_magical: 0, flat_physical: 0, flat_pure: 0, perc_magical: 0.0, perc_physical: 0.0, perc_pure: 0.0, perc_modif_magical: 0.0, perc_modif_physical: 0.0 }) }) }, Id(2, PhantomData<common::game::effect::Effect>): Effect { id: Id(1000, PhantomData<common::game::effect::Effect>), kind: DirectDamage(DirectDamage { range: None, damage: Damage { flat_magical: 0, flat_physical: 0, flat_pure: 0, perc_magical: 0.0, perc_physical: 0.0, perc_pure: 0.0, perc_modif_magical: 0.0, perc_modif_physical: 0.0 } }) }, Id(3, PhantomData<common::game::effect::Effect>): Effect { id: Id(0, PhantomData<common::game::effect::Effect>), kind: Buff(Buff { name: "Block", range: None, success_rate: None, duration: 1, kind: Attribute(Armor, Perc(0.5)) }) }}), maps: IdMap({Id(0, PhantomData<common::game::map::GameMap>): GameMap { name: "Plain with pillars", data: [Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: Wall }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: Wall }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }], width: 5, height: 5, teams: [Team("Evil guys", [Id(0, PhantomData<common::game::map::Cell>), Id(1, PhantomData<common::game::map::Cell>), Id(2, PhantomData<common::game::map::Cell>), Id(3, PhantomData<common::game::map::Cell>), Id(4, PhantomData<common::game::map::Cell>), Id(5, PhantomData<common::game::map::Cell>)]), Team("Very evil guys", [Id(19, PhantomData<common::game::map::Cell>), Id(20, PhantomData<common::game::map::Cell>), Id(21, PhantomData<common::game::map::Cell>), Id(22, PhantomData<common::game::map::Cell>), Id(23, PhantomData<common::game::map::Cell>), Id(24, PhantomData<common::game::map::Cell>)])] }, Id(1, PhantomData<common::game::map::GameMap>): GameMap { name: "Plain with bridge", data: [Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: Water }, Cell { height: 0, attribute: Water }, Cell { height: 0, attribute: Water }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: Water }, Cell { height: 0, attribute: Water }, Cell { height: 0, attribute: Water }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: Water }, Cell { height: 0, attribute: Water }, Cell { height: 0, attribute: Water }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }, Cell { height: 0, attribute: None }], width: 4, height: 6, teams: [Team("Evil guys", [Id(0, PhantomData<common::game::map::Cell>), Id(1, PhantomData<common::game::map::Cell>), Id(2, PhantomData<common::game::map::Cell>), Id(3, PhantomData<common::game::map::Cell>), Id(4, PhantomData<common::game::map::Cell>), Id(5, PhantomData<common::game::map::Cell>)]), Team("Very evil guys", [Id(19, PhantomData<common::game::map::Cell>), Id(20, PhantomData<common::game::map::Cell>), Id(21, PhantomData<common::game::map::Cell>), Id(22, PhantomData<common::game::map::Cell>), Id(23, PhantomData<common::game::map::Cell>), Id(24, PhantomData<common::game::map::Cell>)])] }}), class_to_skills: {Id(0, PhantomData<common::game::class::Class>): [Id(0, PhantomData<common::game::skill::Skill>), Id(2, PhantomData<common::game::skill::Skill>)], Id(1, PhantomData<common::game::class::Class>): [Id(1, PhantomData<common::game::skill::Skill>), Id(2, PhantomData<common::game::skill::Skill>)]}, skill_to_classes: {Id(2, PhantomData<common::game::skill::Skill>): [Id(1, PhantomData<common::game::class::Class>), Id(0, PhantomData<common::game::class::Class>)], Id(0, PhantomData<common::game::skill::Skill>): [Id(0, PhantomData<common::game::class::Class>)], Id(1, PhantomData<common::game::skill::Skill>): [Id(1, PhantomData<common::game::class::Class>)]} }, endpoint: Endpoint { url: Url { scheme: "http", cannot_be_a_base: false, username: "", password: None, host: Some(Domain("localhost")), port: Some(8000), path: "/", query: None, fragment: None }, client: <hidden> } }, CreateOrJoinDataImpl { login: "" })))', frontend/src/state.rs:130:17
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
